import { useEffect, useState } from "react";
import supabase from "./supabase";
import "./style.css";

const CATEGORIES = [
  { name: "technology", color: "#3b82f6" },
  { name: "science", color: "#16a34a" },
  { name: "finance", color: "#ef4444" },
  { name: "society", color: "#eab308" },
  { name: "entertainment", color: "#db2777" },
  { name: "health", color: "#14b8a6" },
  { name: "history", color: "#f97316" },
  { name: "news", color: "#8b5cf6" },
];

const initialFacts = [
  {
    id: 1,
    text: "React is being developed by Meta (formerly facebook)",
    source: "https://opensource.fb.com/",
    category: "technology",
    votesInteresting: 24,
    votesMindblowing: 9,
    votesFalse: 4,
    createdIn: 2021,
  },
  {
    id: 2,
    text: "Millennial dads spend 3 times as much time with their kids than their fathers spent with them. In 1982, 43% of fathers had never changed a diaper. Today, that number is down to 3%",
    source:
      "https://www.mother.ly/parenting/millennial-dads-spend-more-time-with-their-kids",
    category: "society",
    votesInteresting: 11,
    votesMindblowing: 2,
    votesFalse: 0,
    createdIn: 2019,
  },
  {
    id: 3,
    text: "Lisbon is the capital of Portugal",
    source: "https://en.wikipedia.org/wiki/Lisbon",
    category: "society",
    votesInteresting: 8,
    votesMindblowing: 3,
    votesFalse: 1,
    createdIn: 2015,
  },
];

function App() {
  const [showForm, setShowForm] = useState(false);
  const [facts, setFacts] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentCategory, setCurrentCategory] = useState("all");

  /*
  GHI CH√ö: D·ªØ li·ªáu ƒë·∫øn t·ª´ supabase ch∆∞a ƒë∆∞·ª£c t·∫£i v·ªÅ ·ª©ng d·ª•ng. V√† trong l√∫c ch·ªù ƒë·ª£i, ch√∫ng ta mu·ªën cho ng∆∞·ªùi d√πng th·∫•y m·ªôt c√°i g√¨ ƒë√≥ m√† 
  d·ªØ li·ªáu ƒëang ƒë∆∞·ª£c t·∫£i. V√¨ v·∫≠y ch√∫ng ta c·∫ßn t·∫°o ra m·ªôt s·ªë component m√† ch√∫ng ta mu·ªën tr√¨nh b√†y trong th·ªùi gian ch·ªù ƒë·ª£i 
  */

  // M·∫£ng tr·ªëng th·ª© 2 ƒë·∫£m b·∫£o r·∫±ng ch·ª©c nƒÉng ch·ªâ ch·∫°y 1 l·∫ßn ƒë·∫ßu ti√™n khi t·∫£i ·ª©ng d·ª•ng
  useEffect(
    function () {
      async function getFacts() {
        // tr∆∞·ªõc khi ch·ªù ƒë·ª£i d·ªØ li·ªáu await th√¨ ƒë·∫∑t tr·∫°ng th√°i l√† true
        setIsLoading(true);

        let query = supabase.from("facts").select("*");

        if (currentCategory !== "all") {
          query = query.eq("category", currentCategory);
        }

        // await: l√† kho·∫£ng th·ªùi gian ƒë·ª£i ƒë·ªÉ t·∫£i xong d·ªØ li·ªáu n√™n c·∫ßn 1 h√†m b·∫•t ƒë·ªìng b·ªô asysn ·ªü tr√™n
        const { data: facts, error } = await query
          .order("votesInteresting", { ascending: false })
          .limit(1000);
        // L√∫c ƒë·∫ßu d·ªØ li·ªáu tr·ªëng v√† sau khi ch·ªù d·ªØ li·ªáu t·∫£i xong ta s·∫Ω l∆∞u n√≥ v√†o tr·∫°ng th√°i
        if (!error) setFacts(facts);
        else alert("There was a problem getting data");
        // Sau khi d·ªØ li·ªáu ƒë√£ ƒë·∫øn r·ªìi th√¨ th√¨ ƒë·∫∑t l·∫°i tr·∫°ng th√°i l√† false ƒë·ªÉ d·ª´ng l·∫°i vi·ªác loading
        setIsLoading(false);
      }
      // sau khi c√≥ d·ªØ li·ªáu th√¨ g·ªçi l·∫°i h√†m getFacts
      getFacts();
    },
    [currentCategory]
  );

  return (
    <>
      <Header showForm={showForm} setShowForm={setShowForm} />
      {showForm ? (
        <NewFactForm setFacts={setFacts} setShowForm={setShowForm} />
      ) : null}
      {/* <NewFactForm /> */}
      <main className="main">
        <CategoryFilter setCurrentCategory={setCurrentCategory} />
        {isLoading ? (
          <Loader />
        ) : (
          <FastList facts={facts} setFacts={setFacts} />
        )}
      </main>
    </>
  );
}

function Loader() {
  return <p className="message">Loading...</p>;
}

function Header({ showForm, setShowForm }) {
  const appTitle = "Today I Learned";
  return (
    <header className="header">
      <div className="logo">
        <img src="logo.png" alt="Today I Learned Logo" />
        <h1>{appTitle}</h1>
      </div>
      {/* ƒê√≥ng m·ªü Form */}
      <button
        onClick={() => setShowForm((show) => !show)}
        className="btn btn-large btn-open"
      >
        {showForm ? "Close" : "Share a fact"}
      </button>
    </header>
  );
}

function isValidHttpUrl(string) {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === "http:" || url.protocol === "https:";
}

function NewFactForm({ setFacts, setShowForm }) {
  const [text, setText] = useState("");
  const [source, setSource] = useState("http://example.com");
  const [category, setCategory] = useState("");
  const number = 200;
  const textLength = text.length;
  const [isUploading, setIsUploading] = useState(false);

  async function handleSubmit(e) {
    // 1. Prevent brower reload (ngƒÉn ch·∫∑n vi·ªác t·∫£i l·∫°i tr√¨nh duy·ªát)
    e.preventDefault();
    // 2. (Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ h·ª£p l·ªá hay kh√¥ng, n√™u h·ª£p l·ªá th√¨ t·∫°o d·ªØ li·ªáu m·ªõi)
    if (text && isValidHttpUrl(source) && category && textLength <= number) {
      // 3. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng th·ª±c t·∫ø m·ªõi
      // const newFact = {
      //   id: Math.round(Math.random() * 10000000),
      //   text,
      //   source,
      //   category,
      //   votesInteresting: 0,
      //   votesMindblowing: 0,
      //   votesFalse: 0,
      //   createdIn: new Date().getFullYear(),
      // };

      // 3. Upload fact to Supabase and receive the new fact object
      setIsUploading(true);
      const { data: newFact, error } = await supabase
        .from("facts")
        .insert([{ text, source, category }])
        .select("*");
      setIsUploading(false);

      // 4. Th√™m th√¥ng tin m·ªõi t·ªõi giao di·ªán ng∆∞·ªùi d√πng
      if (!error) setFacts((facts) => [newFact[0], ...facts]);
      // 5. ƒê·∫∑t l·∫°i c√°c tr∆∞·ªùng ƒë·∫ßu v√†o th√†nh tr·ªëng
      setText("");
      setSource("");
      setCategory("");
      // 6. ƒê√≥ng to√†n b·ªô bi·ªÉu m·∫´u
      setShowForm(false);
    }
  }

  return (
    <form class="fact-form" onSubmit={handleSubmit}>
      {/* M·ªói l·∫ßn ƒë·∫ßu v√†o thay ƒë·ªïi s·∫Ω g·ªçi ch·ª©c nƒÉng onChange */}
      <input
        type="text"
        placeholder="Share a fact with the world..."
        value={text}
        onChange={(e) => setText(e.target.value)}
        disabled={isUploading}
      />
      <span>{number - textLength}</span>
      <input
        value={source}
        onChange={(e) => setSource(e.target.value)}
        type="text"
        placeholder="Trustworthy spurce..."
        disabled={isUploading}
      />

      <select
        disabled={isUploading}
        value={category}
        onChange={(e) => setCategory(e.target.value)}
      >
        <option value="">Choose category</option>
        {CATEGORIES.map((cat) => {
          return (
            <option key={cat.name} value={cat.name}>
              {cat.name.toUpperCase()}
            </option>
          );
        })}
        {/* <option value="technology">Technology</option>
        <option value="science">Science</option>
        <option value="finacy">Finacy</option> */}
      </select>
      <button class="btn btn-large" disabled={isUploading}>
        Post
      </button>
    </form>
  );
}

function CategoryFilter({ setCurrentCategory }) {
  return (
    <aside>
      <ul>
        {/* <li class="category">
          <button class="btn btn-all-category">All</button>
        </li> */}
        <li className="category">
          <button
            onClick={() => setCurrentCategory("all")}
            class="btn btn-all-category"
          >
            All
          </button>
        </li>
        {CATEGORIES.map((cat) => {
          return (
            <li
              onClick={() => {
                setCurrentCategory(cat.name);
              }}
              key={cat.name}
              className="category"
            >
              <button
                style={{ backgroundColor: cat.color }}
                className="btn btn-category"
              >
                {cat.name}
              </button>
            </li>
          );
        })}
      </ul>
    </aside>
  );
}

function FastList({ facts, setFacts }) {
  if (facts.length === 0) {
    return (
      <p className="message">
        No facts for this category yet! Create the first one üòò
      </p>
    );
  }
  return (
    <section>
      <ul className="facts-list">
        {facts.map((fact) => (
          <Fact fact={fact} setFacts={setFacts} />
        ))}
      </ul>
    </section>
  );
}

function Fact({ fact, setFacts }) {
  const [isUpdating, setIsUpDating] = useState(false);
  async function handleVote(columnName) {
    setIsUpDating(true);
    const { data: updatedFact, error } = await supabase
      .from("facts")
      .update({ [columnName]: fact[columnName] + 1 })
      .eq("id", fact.id)
      .select();
    setIsUpDating(false);

    console.log(updatedFact);
    if (!error)
      setFacts((facts) =>
        facts.map((f) => (f.id === fact.id ? updatedFact[0] : f))
      );
  }

  return (
    <li key={fact.id} className="fact">
      <p>
        {fact.text}
        <a className="source" href={fact.source} target="_blank">
          (Source)
        </a>
      </p>
      <span
        style={{
          backgroundColor: CATEGORIES.find((cat) => cat.name === fact.category)
            .color,
        }}
        className="tag"
      >
        {fact.category}
      </span>
      <div className="vote-buttons">
        <button
          disabled={isUpdating}
          onClick={() => handleVote("votesInteresting")}
        >
          üëç {fact.votesInteresting}
        </button>
        <button
          disabled={isUpdating}
          onClick={() => handleVote("voteMindblowing")}
        >
          ü§Ø {fact.voteMindblowing}
        </button>
        <button disabled={isUpdating} onClick={() => handleVote("votesFalse")}>
          ‚õîÔ∏è {fact.votesFalse}
        </button>
      </div>
    </li>
  );
}

export default App;
